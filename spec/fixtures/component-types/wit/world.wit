package fixtures:component-types;

world fixtures {
    record point {
        x: u32,
        y: u32,
    }
    variant filter {
        all,
        none,
        lt(u32),
    }
    enum size {
        s,
        m,
        l,
    }
    flags permission {
        read,
        write,
        exec,
    }

    export id-bool: func(v: bool) -> bool;
    export id-s8: func(v: s8) -> s8;
    export id-u8: func(v: u8) -> u8;
    export id-s16: func(v: s16) -> s16;
    export id-u16: func(v: u16) -> u16;
    export id-s32: func(v: s32) -> s32;
    export id-u32: func(v: u32) -> u32;
    export id-s64: func(v: s64) -> s64;
    export id-u64: func(v: u64) -> u64;
    export id-f32: func(v: f32) -> f32;
    export id-f64: func(v: f64) -> f64;
    export id-char: func(v: char) -> char;
    export id-string: func(v: string) -> string;
    export id-list: func(v: list<u32>) -> list<u32>;
    export id-record: func(v: point) -> point;
    export id-tuple: func(v: tuple<u32, string>) -> tuple<u32, string>;
    export id-variant: func(v: filter) -> filter;
    export id-enum: func(v: size) -> size;
    export id-option: func(v: option<u32>) -> option<u32>;
    export id-result: func(v: result<u32, u32>) -> result<u32, u32>;
    export id-result-unit: func(v: result) -> result;
    export id-flags: func(v: permission) -> permission;

    export %resource: interface {
        resource wrapped-string {
            constructor(v: string);
            to-string: func() -> string;
        }
        resource-owned: func(v: wrapped-string);
    }
}
